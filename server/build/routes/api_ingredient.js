"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createIngredientCostController = exports.getIngredientStockStatusController = exports.getTotalIngredientsController = exports.paginationIngredientController = exports.deleteTypeController = exports.createTypeController = exports.getAllTypesController = exports.deleteIngredientByIdController = exports.updateIngredientByIdController = exports.createIngredientController = exports.getAllIngredientByIdController = exports.getAllIngredientsController = void 0;
const express_1 = __importDefault(require("express"));
const router = express_1.default.Router();
const CRUD_ingredient_1 = require("../controllers/CRUD_Controllers/CRUD_ingredient");
const statistic_ingredient_controller_1 = require("../controllers/Report_Controllers/statistic_ingredient_controller");
const CRUD_type_1 = require("../controllers/CRUD_Controllers/CRUD_type");
const pagination_1 = require("../controllers/pagination");
const getAllIngredientsController = router.get("/ingredients", CRUD_ingredient_1.handleGetAllIngredients);
exports.getAllIngredientsController = getAllIngredientsController;
const getAllIngredientByIdController = router.get("/ingredient/:id", CRUD_ingredient_1.handleGetAllIngredientById);
exports.getAllIngredientByIdController = getAllIngredientByIdController;
const createIngredientController = router.post("/ingredient", CRUD_ingredient_1.handleCreateIngredient);
exports.createIngredientController = createIngredientController;
const createIngredientCostController = router.post("/ingredient-cost", CRUD_ingredient_1.handleCreateNewCost);
exports.createIngredientCostController = createIngredientCostController;
const updateIngredientByIdController = router.put("/ingredient/:id", CRUD_ingredient_1.handleUpdateIngredientById);
exports.updateIngredientByIdController = updateIngredientByIdController;
const deleteIngredientByIdController = router.delete("/ingredient/:id", CRUD_ingredient_1.handleDeleteIngredientById);
exports.deleteIngredientByIdController = deleteIngredientByIdController;
const getAllTypesController = router.get("/types", CRUD_type_1.handleGetAllTypes);
exports.getAllTypesController = getAllTypesController;
const createTypeController = router.post("/type", CRUD_type_1.handleCreateType);
exports.createTypeController = createTypeController;
const deleteTypeController = router.delete("/type/:id", CRUD_type_1.handleDeleteType);
exports.deleteTypeController = deleteTypeController;
const paginationIngredientController = router.get("/pagination-ingredient", pagination_1.handlePaginationIngredient);
exports.paginationIngredientController = paginationIngredientController;
const getTotalIngredientsController = router.get("/total-ingredients", statistic_ingredient_controller_1.handleGetTotalIngredients);
exports.getTotalIngredientsController = getTotalIngredientsController;
const getIngredientStockStatusController = router.get("/total-ingredients-stock-status", statistic_ingredient_controller_1.handleGetIngredientStockStatus);
exports.getIngredientStockStatusController = getIngredientStockStatusController;
