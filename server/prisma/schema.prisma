// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ingredient {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique
  type                  String
  unit                  String
  quantity              Float
  lowStockThreshold     Float
  lastImportDate        DateTime
  notes                 String?
  supplierId            Int?
  supplier              Supplier?               @relation(fields: [supplierId], references: [id])
  isDeleted             Boolean                 @default(false)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  batchIngredients      BatchIngredient[]
  recipeIngredients     RecipeIngredient[]
  IngredientImport      IngredientImport[]
  IngredientCostHistory IngredientCostHistory[]
}

model IngredientImport {
  id           Int        @id @default(autoincrement())
  ingredientId Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  amount       Float
  totalCost    Float
  importedAt   DateTime   @default(now())
  notes        String? // Ghi chú nếu cần
  createdById  Int
  createdBy    User       @relation(fields: [createdById], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model IngredientCostHistory {
  id           Int        @id @default(autoincrement())
  ingredientId Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  cost         Float
  createdAt    DateTime   @default(now())
  note         String?

  @@index([ingredientId, createdAt])
}

model Supplier {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  contactName String?
  phone       String?
  email       String?
  address     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isDeleted   Boolean      @default(false)
  Ingredient  Ingredient[]
}

model Product {
  id           Int           @id @default(autoincrement())
  code         String        @unique // VD: STOUT-500, PALEALE-330
  name         String // Tên hiển thị: "Bia Stout 500ml"
  description  String?
  volume       Int // Dung tích mặc định (ml)
  unitType     String // Chai, lon, thùng...
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  isDeleted    Boolean       @default(false)
  // Liên kết ngược
  beerProducts BeerProduct[]
}

model BeerProduct {
  id             Int               @id @default(autoincrement())
  code           String            @unique // Mã sản phẩm duy nhất BP20250801-01
  batchId        Int
  batch          Batch             @relation(fields: [batchId], references: [id])
  productId      Int
  product        Product           @relation(fields: [productId], references: [id]) // Mã sản phẩm duy nhất
  quantity       Int
  productionDate DateTime
  expiryDate     DateTime
  status         StatusBeerProduct
  notes          String?
  createdById    Int
  createdBy      User              @relation(fields: [createdById], references: [id])
  isDeleted      Boolean           @default(false)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

enum StatusBeerProduct {
  available
  exported
  faulty
  expired
  reserved
}

model Batch {
  id               Int               @id @default(autoincrement())
  code             String            @unique
  beerName         String
  volume           Float
  notes            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  isCancelled      Boolean           @default(false)
  createdById      Int
  createdBy        User              @relation(fields: [createdById], references: [id])
  recipeId         Int // liên kết công thức (optional)
  recipe           Recipe            @relation(fields: [recipeId], references: [id])
  batchIngredients BatchIngredient[]
  batchSteps       BatchStep[]
  BeerProduct      BeerProduct[]

  @@index([recipeId])
  @@index([createdById])
}

model BatchStep {
  id             Int       @id @default(autoincrement())
  batchId        Int
  recipeStepId   Int
  stepOrder      Int
  name           String
  feedback       String?
  actualDuration String?
  startedAt      DateTime?
  scheduledEndAt DateTime?

  batch      Batch      @relation(fields: [batchId], references: [id])
  recipeStep RecipeStep @relation(fields: [recipeStepId], references: [id])

  @@unique([batchId, stepOrder])
  @@index([batchId])
}

model BatchIngredient {
  id           Int   @id @default(autoincrement())
  batchId      Int
  ingredientId Int
  amountUsed   Float

  batch      Batch      @relation(fields: [batchId], references: [id])
  ingredient Ingredient @relation(fields: [ingredientId], references: [id])
}

model Recipe {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  description       String?
  note              String?
  instructions      String?
  isDeleted         Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  createdById       Int
  createdBy         User               @relation(fields: [createdById], references: [id])
  recipeIngredients RecipeIngredient[]
  batches           Batch[]
  steps             RecipeStep[]
}

model RecipeStep {
  id              Int    @id @default(autoincrement())
  recipeId        Int
  stepOrder       Int
  name            String
  durationMinutes Int

  recipe     Recipe      @relation(fields: [recipeId], references: [id])
  batchSteps BatchStep[]

  @@unique([recipeId, stepOrder])
  @@index([recipeId])
}

model RecipeIngredient {
  id           Int   @id @default(autoincrement())
  recipeId     Int
  ingredientId Int
  amountNeeded Float

  recipe     Recipe     @relation(fields: [recipeId], references: [id])
  ingredient Ingredient @relation(fields: [ingredientId], references: [id])
}

model ActivityLog {
  id          Int      @id @default(autoincrement())
  action      String
  entity      String
  entityId    Int
  description String
  timestamp   DateTime @default(now())
  userId      Int? // tuỳ chọn nếu bạn có bảng User
}

model User {
  id               Int                @id @default(autoincrement())
  username         String             @unique
  password         String // hashed password
  email            String?
  fullname         String?
  birthday         String?
  phone            String
  role             Role // enum: 'SUPER_ADMIN' | 'ADMIN'
  branch           String? // tên chi nhánh, chỉ dành cho ADMIN
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  isDeleted        Boolean            @default(false)
  IngredientImport IngredientImport[]
  Batch            Batch[]
  Recipe           Recipe[]
  BeerProduct      BeerProduct[]
}

enum Role {
  SUPER_ADMIN
  ADMIN
}

model Type {
  id       Int    @id @default(autoincrement())
  typeName String @unique
}
